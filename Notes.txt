- Binary: supervised machine learning algorithm. Returns true or false. 
- Regression: supervised. Return real values. Predicts the one unknown value. 
	E.g.: Attrition, weather forecasts, stocks, prices. 
	LINEAR regression: output is numeric unknown value. 
	LOGISTIC regression: returns probability of outcome occurring. 
		- Good for boolean and pre-defined range of values
	- ML.NET provides the following LINEAR regression trainers:
	FastTreeRegressionTrainer
	FastTreeTweedieTrainer
	FastForestRegressionTrainer
	GamRegressionTrainer
	LbfgsPoissonRegressionTrainer
	LightGbmRegressionTrainer
	OlsTrainer
	OnlineGradientDescentTrainer
	SdcaRegressionTrainer
	- ML.NET provides the following binary LOGISTIC regression trainers:
	LbfgsLogisticRegressionBinaryTrainer
	SdcaLogisticRegressionBinaryTrainer
	SdcaNonCalibratedBinaryTrainer
	SymbolicSgdLogisticRegressionBinaryTrainer
- Anomaly detection
- Clustering
- Matrix factorization

Chapter 3
EmploymentHistory class: These columns map in order for the sample data reviewed previously
The EmploymentHistoryPrediction class contains only the prediction value of how
many months the employee is projected to be at his or her job in the DurationInMonths
property

Chapter 3 : Linear Regression 
PS C:\Users\ofu23\Documents\Projects\ML_Chapter_2\ML_Chapter_2\bin\Debug\netcoreapp3.1> .\ML_Chapter_2.exe train ..\..\..\Data\ch3-sampledata.csv
Loss Function: 47.07
Mean Absolute Error: 6.1
Mean Squared Error: 47.07
RSquared: 0.08
Root Mean Squared Error: 6.86

Chapter 3 : Regression Model
logistic regression command
PS C:\Users\ofu23\Documents\Projects\ML_Chapter_2\LogisticRegression\bin\debug\netcoreapp3.1> ./LogisticRegression.exe predict ./LogisticRegression.exe
Based on the file (./LogisticRegression.exe) the file is classified as benign at a confidence level of 21%


Chapter 4 : Classification Model
Train
PS C:\Users\ofu23\Documents\Projects\ML_Chapter_2\4_classification\bin\debug\netcoreapp3.1> ./Chapter_4_classification.exe train ../../../Data/sampledata.csv ../../../Data/testdata.csv
Accuracy: 88.89%
Area Under Curve: 100.00%
Area under Precision recall Curve: 100.00%
F1Score: 87.50%
LogLoss: 2.19
LogLossReduction: -1.19
PositivePrecision: 1
PositiveRecall: .78
NegativePrecision: .82
NegativeRecall: 100.00%

Predict
PS C:\Users\ofu23\Documents\Projects\Learn-ML.NET\4_classification\bin\debug\netcoreapp3.1> ./Chapter_4_classification.exe predict ../../../Data/jsconfig1.json
Based on input json:
{

  "HasSunroof": 0,
  "HasAC": 0,
  "HasAutomaticTransmission": 0,
  "Amount": 1300
}
The car price is a good deal, with a 100% confidence

Multiclass
Train
PS C:\Users\ofu23\Documents\Projects\Learn-ML.NET\Chapter_4_multiclass_classification\bin\debug\netcoreapp3.1>  ./Chapter_4_multiclass_classification.exe train ../../../Data/sampledata.csv ../../../Data/testdata.csv
MicroAccuracy: 1
MacroAccuracy: 1
LogLoss: .094
LogLossReduction: .865

Predict
PS C:\Users\ofu23\Documents\Projects\Learn-ML.NET\Chapter_4_multiclass_classification\bin\debug\netcoreapp3.1>  ./Chapter_4_multiclass_classification.exe predict ../../../Data/input.json
Based on input json:
{
  "Subject": "Bye",
  "Body": "Hate evil anger!!!",
  "Sender": "joe@gmail.com"
}

The email is predicted to be a "enemy"

Properties and metrics: 
	-Accuracy
	-Area Under ROC Curve
	-F1 Score
	-Area Under Precision-Recall Curve
	From MulticlassClassificationMetrics
	-Micro Accuracy
	-Macro Accuracy
	-Log Loss
	-Log-Loss Reduction

----   ---   ---
passing args to Main method: 
go to project settings > debug > application arguments. Write train ../../../Data/sampledata.csv
